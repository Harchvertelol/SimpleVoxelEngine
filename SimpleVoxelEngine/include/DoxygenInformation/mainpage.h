/*!
 \mainpage Документация по SimpleVoxelEngine.

 \section intro Введение

 Движок SimpleVoxelEngine является простым воксельным движком, автором которого является Харч. Он (движок)
 даёт быструю и довольно простую работу с воксельным миром "из коробки". Что такое воксельный мир? Это мир,
 который состоит из трёхмерных пикселей. В частности - из кубиков. Данный движок реализует любую возможность
 хранения и отрисовки вокселей. Он <b>не содержит</b> в себе механизма, который делает за пользователя
 отрисовку воксельного мира. Это ложится на плечи пользователей, но не стоит пугаться. Можно написать любые
 врапперы для любых графических движков с SimpleVoxelEngine. В частности, автором SimpleVoxelEngine был написан
 враппер для графического движка Irrlicht Engine: IrrSimpleVoxelEngine. SimpleVoxelEngine реализует хранение и
 работу с воксельным миром, а так же берёт на себя все расчёты для правильной и быстрой отрисовки мира,
 предоставляя необходимые данные врапперу или пользователю.

 \section friststep С чего начать?

 <a href="ideas.html">Общие идеи работы движка</a>: Данный раздел содержит общие идеи, необходимые для понимания сути работы движка.<br>
 <a href="install.html">Настройка движка</a>: Данный раздел содержит инструкции по настройке движка для работы.<br>
 <a href="tutorials.html">Уроки</a>: Данный раздел содержит набор уроков по движку SimpleVoxelEngine.<br>
 <a href="author.html">Об авторе движка</a>: Данный раздел содержит информацию об авторе движка и людях, помогающих с его развитием.<br>

 \section links Быстрые ссылки

 <A HREF="namespaces.html">Пространства имён</A>: Очень удобно начинать изучение общей структуры движка отсюда.<br>
 <A HREF="annotated.html">Список классов</A>: Список всех классов движка с описаниями.<br>
 <A HREF="functions.html">Список функций</A>: Здесь удобно искать функции, если что-то забыл.<br>
 <A HREF="changes.html">Изменения в движке</A>: Здесь прописываются изменения в движке по версиям.<br>

 \section examples Короткий пример

 Пример простейшего приложения на SimpleVoxelEngine.

 \code
 #include <SimpleVoxelEngine.h> // Подключили воксельный движок.
 using namespace SimpleVoxelEngine; // Главное пространство имён движка.
 using namespace Core; // Ядро, тут содержатся основные объекты.
 using namespace Additional; //Дополнительные возможности, подключаем для использования Vector3d.
 using namespace Voxels; // Подключение пространства имён вокселей.
 int main()
 {
     Engine* sve = new Engine; // Создали движок.
     int id = sve->addWorld(); // Создали мир по умолчанию, запомнили ID мира. По умолчанию размер ребра чанка 16 вокселей.
     World* wrld = sve->getWorld(id); // Получили указатель на мир по его ID.
     wrld->loadChunk(Vector3d<int>(0,0,0)); // Загрузили, а вернее сгенерировали пустой (так как не создавали генератора мира) чанк с координатами (0, 0, 0) в мире.
     ChunkVoxelObject* chunk = wrld->getChunk(Vector3d<int>(0,0,0)); // Получили указатель на загруженный чанк.
     ARGBColorVoxel* argbclrvxl = new ARGBColorVoxel; // Создали предустановленный тип вокселя, у которого имеется только один параметр - ARGB цвет.
     argbclrvxl->setARGBColor(ARGBColor(255,255,255,255)); // Установили его белым цветом.
     chunk->setSimpleVoxelObject(Vector3d<int>(2,2,2), argbclrvxl, true); // Поставили наш белый воксель в точку (2,2,2) в относительных координатах чанка.
     delete sve; // Удалили движок.
     return 0; // Вышли из программы.
 }
 \endcode
*/
